{
  "name": "single-tls-tunnel",
  "description": "A single port TLS tunnel implementation to support a single downstream client proxy",
  "version": "1.0.0",
  "homepage": "https://github.com/pghalliday/single-tls-tunnel.git",
  "author": {
    "name": "Peter Halliday",
    "email": "pghalliday@gmail.com",
    "url": "http://stuffpetedoes.blogspot.nl/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pghalliday/single-tls-tunnel.git"
  },
  "bugs": {
    "url": "https://github.com/pghalliday/single-tls-tunnel/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pghalliday/single-tls-tunnel/blob/master/LICENSE-MIT"
    }
  ],
  "main": "src/index.js",
  "engines": {
    "node": ">= 0.8.12"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "multiplex-stream": "1.0.0",
    "pipette": "~0.9.1"
  },
  "devDependencies": {
    "grunt": "0.3.17",
    "chai": "1.3.0",
    "grunt-mocha-test": "0.0.1",
    "checklist": "0.0.6",
    "grunt-shell": "~0.1.3"
  },
  "keywords": [
    "TLS",
    "Tunnel"
  ],
  "readme": "single-tls-tunnel\r\n=================\r\n\r\nA single port TLS tunnel implementation to support a single downstream client proxy\r\n\r\n## Features\r\n\r\n- should use HTTP for initial client connection and upgrade the socket to a TLS connection\r\n- should tunnel raw socket traffic\r\n- should tunnel HTTP traffic\r\n- should tunnel TLS traffic\r\n- should tunnel HTTPS traffic\r\n\r\n## Installation\r\n\r\n```\r\nnpm install single-tls-tunnel\r\n```\r\n\r\n## API\r\n\r\nTo instantiate a server and start listening for a client connection\r\n\r\n```javascript\r\nvar Server = require('single-tls-tunnel').Server;\r\n\r\nvar server = new Server({\r\n  key: SERVER_KEY,\r\n  cert: SERVER_CERT,\r\n  ca: [CLIENT_CERT], \r\n  requireCert: true,\r\n  rejectUnauthorized: true  \r\n});\r\n\r\nserver.listen(PUBLIC_PORT, function() {\r\n  // Server is now listening\r\n});\r\n```\r\n\r\nTo instantiate a client and connect to the server\r\n\r\n```javascript\r\nvar Client = require('single-tls-tunnel').Client;\r\n\r\nvar client = new Client({\r\n  host: PUBLIC_HOST,\r\n  port: PUBLIC_PORT,\r\n  key: CLIENT_KEY,\r\n  cert: CLIENT_CERT,\r\n  ca: [SERVER_CERT],\r\n  rejectUnauthorized: true\r\n}, {\r\n  host: PRIVATE_HOST,\r\n  port: PRIVATE_PORT\r\n});\r\n\r\nclient.connect(function() {\r\n  // Client is now connected\r\n});\r\n```\r\n\r\nFrom now on, any connection made to PUBLIC_HOST:PUBLIC_PORT will be forwarded to PRIVATE_HOST:PRIVATE_PORT\r\n\r\n## Hints on generating certs for testing\r\n\r\nSee the ``test/keys`` folder for certificates used by the tests. These can be regenerated at anytime using either ``keys.sh`` (OSX, Linux) or ``keys.bat`` (Windows). These scripts use [OpenSSL](http://www.openssl.org). OSX and Linux most likely already ship with OpenSSL. If using Windows you will need to install [OpenSSL](http://slproweb.com/products/Win32OpenSSL.html) first.\r\n\r\nIt should be noted that for the client to authorize server certificates they need to have the correct hosts listed as altnames in the v3 extensions (although this doesn't seem to be required on Windows).\r\n\r\n## Roadmap\r\n\r\n- No backlog items\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using ``./grunt.sh`` or ``.\\grunt.bat``.\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.",
  "_id": "single-tls-tunnel@1.0.0",
  "_from": "single-tls-tunnel"
}
