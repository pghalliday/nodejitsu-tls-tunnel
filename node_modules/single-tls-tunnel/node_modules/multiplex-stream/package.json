{
  "name": "multiplex-stream",
  "description": "Multiplex multiple streams through a single stream",
  "version": "1.0.0",
  "homepage": "https://github.com/pghalliday/multiplex-stream.git",
  "author": {
    "name": "Peter Halliday",
    "email": "pghalliday@gmail.com",
    "url": "http://stuffpetedoes.blogspot.nl/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pghalliday/multiplex-stream.git"
  },
  "bugs": {
    "url": "https://github.com/pghalliday/multiplex-stream/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pghalliday/multiplex-stream/blob/master/LICENSE-MIT"
    }
  ],
  "main": "src/MultiplexStream.js",
  "engines": {
    "node": ">= 0.8.12"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "node-uuid": "~1.4.0"
  },
  "devDependencies": {
    "grunt": "0.3.17",
    "grunt-mocha-test": "0.0.1",
    "checklist": "0.0.6",
    "tunnel-stream": "0.0.1",
    "expect.js": "~0.2.0"
  },
  "keywords": [],
  "readme": "multiplex-stream\r\n================\r\n\r\nMultiplex multiple streams through a single stream\r\n\r\n## Features\r\n\r\n- should provide multiple readable/writable streams over a single carrier stream\r\n- should behave correctly with intermediate flow control where data events may get split and/or concatenated\r\n- should allow the downstream connection to write data first\r\n- should allow a stream to be named\r\n- should error if the upstream multiplex already has a connection with the requested name\r\n- should timeout if no multiplex responds to connect requests\r\n- should timeout connect requests if the downstream multiplex already has a connection with the requested name as multicasting to more than one multiplex is not a supported use case\r\n- should end tunnel streams cleanly when the multiplex stream ends\r\n\r\n## Installation\r\n\r\n```\r\nnpm install stream-multiplex\r\n```\r\n\r\n## API\r\n\r\n```javascript\r\nvar MultiplexStream = require('multiplex-stream');\r\n\r\n// create downstream multiplex that listens for connections\r\nvar downstreamMultiplex = new MultiplexStream(function(downstreamConnection) {\r\n  // a multiplexed stream has connected from upstream.\r\n  // The assigned id will be accessible as downstreamConnection.id\r\n  downstreamConnection.setEncoding();\r\n  downstreamConnection.on('data', function(data) {\r\n    // received data, send reply upstream\r\n    downstreamConnection.write('Hello, upstream');\r\n  });\r\n  downstreamConnection.on('end', function(data) {\r\n    // downstream connection has ended\r\n  });\r\n});\r\n\r\n// create upstream multiplex that will be used to initiate connections\r\nvar upstreamMultiplex = new MultiplexStream({\r\n  // The connectTimeout optionally specifies how long to\r\n  // wait in milliseconds for the downstream multiplex to\r\n  // accept to connections. It defaults to 3000 milliseconds\r\n  connectTimeout: 5000\r\n});\r\n\r\n// pipe from one multiplex to the other (there could\r\n// be other carrier streams in between, for instance a net socket)\r\nupstreamMultiplex.pipe(downstreamMultiplex).pipe(upstreamMultiplex);\r\n\r\n// create a new upstream multiplexed stream\r\nvar upstreamConnection = upstreamMultiplex.connect({\r\n  // optionally specify an id for the stream. By default\r\n  // a v1 UUID will be assigned as the id for anonymous streams\r\n  id: 'MyStream'\r\n}, function() {\r\n  upstreamConnection.setEncoding();\r\n  upstreamConnection.on('data', function(data) {\r\n    // received reply, end the connection\r\n    upstreamConnection.end();        \r\n  });\r\n  upstreamConnection.on('end', function(data) {\r\n    // upstream connection has ended\r\n  });\r\n  // send some data downstream\r\n  upstreamConnection.write('Hello, downstream');\r\n}).on('error', function(error) {\r\n  // timeouts and other errors resulting from connect requests\r\n});\r\n```\r\n\r\n## Roadmap\r\n\r\n- Nothing at this time\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using ``./grunt.sh`` or ``.\\grunt.bat``.\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.",
  "_id": "multiplex-stream@1.0.0",
  "_from": "multiplex-stream@1.0.0"
}
