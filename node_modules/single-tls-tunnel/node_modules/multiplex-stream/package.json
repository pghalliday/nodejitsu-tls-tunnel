{
  "name": "multiplex-stream",
  "description": "Multiplex multiple streams through a single stream",
  "version": "0.0.2",
  "homepage": "https://github.com/pghalliday/multiplex-stream.git",
  "author": {
    "name": "Peter Halliday",
    "email": "pghalliday@gmail.com",
    "url": "http://stuffpetedoes.blogspot.nl/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pghalliday/multiplex-stream.git"
  },
  "bugs": {
    "url": "https://github.com/pghalliday/multiplex-stream/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pghalliday/multiplex-stream/blob/master/LICENSE-MIT"
    }
  ],
  "main": "src/MultiplexStream.js",
  "engines": {
    "node": ">= 0.8.12"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "node-uuid": "~1.4.0"
  },
  "devDependencies": {
    "grunt": "0.3.17",
    "chai": "1.3.0",
    "grunt-mocha-test": "0.0.1",
    "pipette": "~0.9.1",
    "checklist": "0.0.6"
  },
  "keywords": [],
  "readme": "multiplex-stream\r\n================\r\n\r\nMultiplex multiple streams through a single stream\r\n\r\n## Features\r\n\r\n- should provide multiple readable/writable streams over a single carrier stream\r\n- should behave correctly with intermediate flow control where data events may get merged\r\n- should behave correctly with intermediate flow control where data events may get split\r\n\r\n## Installation\r\n\r\n```\r\nnpm install stream-multiplex\r\n```\r\n\r\n## API\r\n\r\n```javascript\r\nvar MultiplexStream = require('multiplex-stream');\r\n\r\n// create 2 multiplex instances and listen for connections downstream\r\nvar upstreamMultiplex = new MultiplexStream();\r\nvar downstreamMultiplex = new MultiplexStream(function(downstreamConnection) {\r\n  // a multiplexed stream has connected from upstream\r\n  downstreamConnection.setEncoding();\r\n  downstreamConnection.on('data', function(data) {\r\n    // received data, send reply upstream\r\n    downstreamConnection.write('Hello, upstream');\r\n  });\r\n  downstreamConnection.on('end', function(data) {\r\n    // downstream connection has ended\r\n  });\r\n});\r\n\r\n// pipe from one multiplex to the other (there could\r\n// be other carrier streams in between, for instance a net socket)\r\nupstreamMultiplex.pipe(downstreamMultiplex);\r\ndownstreamMultiplex.pipe(upstreamMultiplex);\r\n\r\n// create a new upstream multiplexed stream\r\nvar upstreamConnection = upstreamMultiplex.createStream();\r\nupstreamConnection.setEncoding();\r\nupstreamConnection.on('data', function(data) {\r\n  // received reply, end the connection\r\n  upstreamConnection.end();        \r\n});\r\nupstreamConnection.on('end', function(data) {\r\n  // upstream connection has ended\r\n});\r\n// send some data downstream\r\nupstreamConnection.write('Hello, downstream');\r\n```\r\n\r\n## Roadmap\r\n\r\n- Currently no backlog items\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using ``./grunt.sh`` or ``.\\grunt.bat``.\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.",
  "_id": "multiplex-stream@0.0.2",
  "_from": "multiplex-stream@0.0.2"
}
